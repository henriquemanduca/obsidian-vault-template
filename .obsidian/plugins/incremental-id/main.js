/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/base-migration.ts
var BaseMigration;
var init_base_migration = __esm({
  "src/utils/base-migration.ts"() {
    BaseMigration = class {
    };
  }
});

// src/utils/version.ts
var Version;
var init_version = __esm({
  "src/utils/version.ts"() {
    Version = class _Version {
      constructor(major, minor, patch) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
      }
      static parse(stringVersion) {
        const [major, minor, patch] = stringVersion.split(".").map((v) => Number(v));
        return new _Version(major, minor, patch);
      }
      isBefore(version) {
        return this.major < version.major || this.major === version.major && this.minor < version.minor || this.major === version.major && this.minor === version.minor && this.patch < version.patch;
      }
      isBeforeOrEqual(version) {
        return this.isBefore(version) || this.isEqual(version);
      }
      isEqual(version) {
        return this.major === version.major && this.minor === version.minor && this.patch === version.patch;
      }
    };
  }
});

// src/migrations/1704537710492-support-leading-zeros-and-custom-separator-in-legacy-configuration.ts
var SupportLeadingZerosAndCustomSeparatorInLegacyConfigurationMigration;
var init_support_leading_zeros_and_custom_separator_in_legacy_configuration = __esm({
  "src/migrations/1704537710492-support-leading-zeros-and-custom-separator-in-legacy-configuration.ts"() {
    init_base_migration();
    init_version();
    SupportLeadingZerosAndCustomSeparatorInLegacyConfigurationMigration = class _SupportLeadingZerosAndCustomSeparatorInLegacyConfigurationMigration extends BaseMigration {
      constructor() {
        super(...arguments);
        this.name = _SupportLeadingZerosAndCustomSeparatorInLegacyConfigurationMigration.name;
        this.description = "Add default values related to separator and leading zeros to existing configuration";
        this.version = Version.parse("0.4.0");
      }
      async up(config) {
        const legacyIdDefinitions = config.configuration.idDefinitions;
        config.configuration.idDefinitions = legacyIdDefinitions.map((idDefinition) => {
          return {
            ...idDefinition,
            separator: "-",
            leadingZeros: {
              enabled: false,
              numberOfZeros: 8
            }
          };
        });
        config.configuration.appliedMigrations.push(this.name);
        await config.save();
      }
      async down() {
        return;
      }
    };
  }
});

// src/migrations/index.ts
var migrations_exports = {};
__export(migrations_exports, {
  migrations: () => migrations
});
var migrations;
var init_migrations = __esm({
  "src/migrations/index.ts"() {
    init_support_leading_zeros_and_custom_separator_in_legacy_configuration();
    migrations = [SupportLeadingZerosAndCustomSeparatorInLegacyConfigurationMigration];
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/incremental-id-plugin.ts
var import_obsidian3 = require("obsidian");

// src/generate-incremental-id.ts
var getCurrentIterationWithLeadingZeros = (idDefinition) => {
  const numberOfZeros = idDefinition.leadingZeros.numberOfZeros;
  const currentIteration = idDefinition.currentIteration.toString();
  const numberOfLeadingZeros = numberOfZeros - currentIteration.length;
  const leadingZeros = "0".repeat(numberOfLeadingZeros);
  return `${leadingZeros}${currentIteration}`;
};
var generateIncrementalId = async (configuration) => {
  const prefix = `${configuration.prefix}${configuration.separator}`;
  if (configuration.leadingZeros.enabled) {
    return `${prefix}${getCurrentIterationWithLeadingZeros(configuration)}`;
  } else {
    return `${prefix}${configuration.currentIteration.toString()}`;
  }
};

// src/command-handler.ts
var CommandHandler = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  register() {
    this.plugin.configuration.configuration.idDefinitions.forEach((idDefinition) => {
      if (idDefinition.prefix) {
        this.add(null, idDefinition);
      }
    });
  }
  add(oldIdDefinition, newIdDefinition) {
    this.remove(oldIdDefinition);
    if (newIdDefinition) {
      this.plugin.addCommand({
        id: newIdDefinition.prefix,
        name: `Insert ${newIdDefinition.name}`,
        editorCallback: async (editor) => {
          const idDef = await this.plugin.configuration.getIncrementId(newIdDefinition.prefix);
          if (idDef) {
            const id = await generateIncrementalId(idDef);
            editor.replaceSelection(id);
          }
        }
      });
    }
  }
  remove(idDefinition) {
    if (idDefinition) {
      app.commands.removeCommand(this.getCommandId(idDefinition.prefix));
    }
  }
  getCommandId(prefix) {
    return `${this.plugin.manifest.id}:insert-id:${prefix}`;
  }
};

// src/settings/incremental-id-plugin-setting-tab.ts
var import_obsidian2 = require("obsidian");

// src/utils/index.ts
var import_obsidian = require("obsidian");
var Logger = class {
  static update(msg) {
    const notice = new import_obsidian.Notice("", 8e3);
    notice.noticeEl.innerHTML = `<b>Icremental Id Update</b>:<br/>${msg}`;
  }
  static error(e) {
    const notice = new import_obsidian.Notice("", 8e3);
    notice.noticeEl.innerHTML = `<b>Icremental Id Error</b>:<br/>${e.message}`;
  }
};

// src/settings/is-id-definition-valid.ts
var isLeadingZerosInvalid = (def, currValidationState) => {
  const { numberOfZeros } = def;
  if (numberOfZeros < 0 || numberOfZeros > 64) {
    Logger.error(new Error("You need provide number between 0-64"));
    currValidationState = true;
  }
  if (typeof def.enabled !== "boolean") {
    Logger.error(new Error("You need provide boolean"));
    currValidationState = true;
  }
  return currValidationState;
};
var isIdDefinitionValid = (def, existingDefinitions) => {
  let invalid = false;
  if (def.name.length < 3 || existingDefinitions.find(({ name }) => name === def.name)) {
    Logger.error(new Error("You need provide unique name with at least 3 characters"));
    invalid = true;
  }
  if (def.prefix.length < 2 || !/^[A-Za-z0-9]*$/.test(def.prefix) || existingDefinitions.find(({ prefix }) => prefix === def.prefix)) {
    Logger.error(new Error("You need provide unique prefix from letters and numbers with at least 2 characters"));
    invalid = true;
  }
  if (!Number.isInteger(def.currentIteration) || def.currentIteration < 0) {
    Logger.error(new Error("You need provide positive integer or 0"));
    invalid = true;
  }
  invalid = isLeadingZerosInvalid(def.leadingZeros, invalid);
  return !invalid;
};

// src/settings/incremental-id-plugin-setting-tab.ts
var IncrementalIdPluginSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(plugin, config) {
    super(app, plugin);
    this.plugin = plugin;
    this.config = config;
  }
  addAddIdDefinitionSection() {
    let tempIdDefinition = {
      prefix: "",
      currentIteration: 0,
      name: "",
      separator: "-",
      leadingZeros: {
        enabled: false,
        numberOfZeros: 8
      }
    };
    const s = new import_obsidian2.Setting(this.containerEl).addText((cb) => {
      cb.setPlaceholder("Provide name for your ID").setValue(tempIdDefinition.name).onChange(async (newIdName) => {
        tempIdDefinition.name = newIdName;
      });
    }).addText((cb) => {
      cb.setPlaceholder("Provide prefix for your ID, only uppercase letters allowed").setValue(tempIdDefinition.prefix).onChange(async (newPrefix) => {
        tempIdDefinition.prefix = newPrefix;
      });
    }).addText((cb) => {
      cb.setPlaceholder("Provide separator for your ID").onChange(async (separator) => {
        tempIdDefinition.separator = separator;
      });
    }).addText((cb) => {
      cb.setPlaceholder("Provide current iteration for your ID").setValue(tempIdDefinition.currentIteration.toString()).onChange(async (newIdIteration) => {
        tempIdDefinition.currentIteration = Number(newIdIteration);
      });
    }).addToggle((cb) => {
      cb.setTooltip("Enable leading zeros").setValue(tempIdDefinition.leadingZeros.enabled).onChange(async (enabled) => {
        tempIdDefinition.leadingZeros.enabled = enabled;
      });
    }).addText((cb) => {
      cb.setPlaceholder("Provide number of zeros between 0-64 for your ID").setValue(tempIdDefinition.leadingZeros.numberOfZeros.toString()).onChange(async (separator) => {
        tempIdDefinition.leadingZeros.numberOfZeros = Number(separator);
      });
    }).addButton((cb) => {
      cb.setButtonText("Add new ID definition").setCta().onClick(async () => {
        if (!isIdDefinitionValid(tempIdDefinition, this.config.configuration.idDefinitions)) {
          return;
        }
        this.config.configuration.idDefinitions.push(tempIdDefinition);
        this.plugin.commandHandler.add(null, tempIdDefinition);
        tempIdDefinition = {
          prefix: "",
          currentIteration: 0,
          name: "",
          separator: "-",
          leadingZeros: {
            enabled: false,
            numberOfZeros: 8
          }
        };
        await this.config.save();
        this.display();
      });
    });
    s.infoEl.remove();
    s.settingEl.style.border = "2px solid #000000";
    s.settingEl.style.padding = "4px";
    s.settingEl.style.marginBottom = "4px";
    s.controlEl.style.display = "flex";
    s.controlEl.style.flexWrap = "wrap";
    s.controlEl.style.justifyContent = "flex-start";
  }
  addIdDefinitionSettingsSection() {
    this.containerEl.createEl("h2", { text: "Provide your IDs" });
    const desc = document.createDocumentFragment();
    desc.append("Particular IDs allow you to have a few separated IDs for different types of notes.");
    new import_obsidian2.Setting(this.containerEl).setDesc(desc);
    const fieldsDesc = document.createDocumentFragment();
    fieldsDesc.append(
      "Options: Name, prefix, separator, current iteration, enable leading zeros, number of leading zeros"
    );
    new import_obsidian2.Setting(this.containerEl).setDesc(fieldsDesc);
    const leadingZerosDesc = document.createDocumentFragment();
    leadingZerosDesc.append(
      "Leading zeros generate zeros before current iteration, for example: CD-00000001, CD-00000002, CD-00000003"
    );
    new import_obsidian2.Setting(this.containerEl).setDesc(leadingZerosDesc);
    this.config.configuration.idDefinitions.forEach((idDefinition, index) => {
      const s = new import_obsidian2.Setting(this.containerEl).addText((cb) => {
        cb.setPlaceholder("Provide name for your ID").setValue(idDefinition.name).onChange(async (newIdName) => {
          if (newIdName && this.config.configuration.idDefinitions.find(({ name }) => name === newIdName)) {
            Logger.error(new Error("You need provide unique name"));
            return;
          }
          const updated = {
            ...this.config.configuration.idDefinitions[index],
            name: newIdName
          };
          this.plugin.commandHandler.add(this.config.configuration.idDefinitions[index], updated);
          this.config.configuration.idDefinitions[index] = updated;
          await this.config.save();
        });
      }).addText((cb) => cb.setDisabled(true).setValue(idDefinition.prefix)).addText((cb) => cb.setDisabled(true).setValue(idDefinition.separator)).addText((cb) => cb.setDisabled(true).setValue(idDefinition.currentIteration.toString())).addText((cb) => cb.setDisabled(true).setValue(idDefinition.leadingZeros.numberOfZeros.toString())).addToggle((cb) => cb.setDisabled(true).setValue(idDefinition.leadingZeros.enabled)).addButton((cb) => {
        cb.setButtonText("Delete").setCta().onClick(async () => {
          this.config.configuration.idDefinitions.splice(index, 1);
          await this.config.save();
          this.plugin.commandHandler.remove(this.config.configuration.idDefinitions[index]);
          this.display();
        });
      });
      s.infoEl.remove();
      s.settingEl.style.border = "2px solid #000000";
      s.settingEl.style.padding = "4px";
      s.settingEl.style.marginBottom = "4px";
      s.controlEl.style.display = "flex";
      s.controlEl.style.flexWrap = "wrap";
      s.controlEl.style.justifyContent = "flex-start";
    });
  }
  display() {
    this.containerEl.empty();
    this.addIdDefinitionSettingsSection();
    this.addAddIdDefinitionSection();
  }
};

// src/configuration/incremental-id-configuration.ts
var DEFAULT_CONFIGURATION = {
  appliedMigrations: [],
  idDefinitions: [
    {
      name: "Global ID",
      currentIteration: 0,
      prefix: "GUID",
      separator: "-",
      leadingZeros: {
        enabled: false,
        numberOfZeros: 8
      }
    }
  ]
};
var IncrementalIdConfiguration = class _IncrementalIdConfiguration {
  constructor(plugin) {
    this.plugin = plugin;
  }
  static async create(plugin) {
    const instance = new _IncrementalIdConfiguration(plugin);
    instance.configuration = Object.assign({}, DEFAULT_CONFIGURATION, await instance._load());
    return instance;
  }
  async getIncrementId(aPrefix) {
    const index = this.configuration.idDefinitions.findIndex(({ prefix }) => prefix === aPrefix);
    if (index < 0) {
      Logger.error(new Error("Invalid ID prefix"));
      return;
    }
    this.configuration.idDefinitions[index].currentIteration++;
    await this.save();
    return this.configuration.idDefinitions[index];
  }
  async getCurrentId(aPrefix) {
    const index = this.configuration.idDefinitions.findIndex(({ prefix }) => prefix === aPrefix);
    if (index < 0) {
      Logger.error(new Error("Invalid ID prefix"));
      return;
    }
    return this.configuration.idDefinitions[index];
  }
  async save() {
    await this._save(this.configuration);
  }
  async _save(data) {
    await this.plugin.saveData(data);
  }
  _load() {
    return this.plugin.loadData();
  }
};

// src/utils/run-migrations.ts
var runMigrations = async (configuration) => {
  const { migrations: migrations2 } = await Promise.resolve().then(() => (init_migrations(), migrations_exports));
  configuration.configuration.appliedMigrations = configuration.configuration.appliedMigrations || [];
  const migrationInstances = migrations2.map((migrationClass) => {
    return new migrationClass();
  });
  const migrationsToApply = migrationInstances.filter((migration) => {
    return !configuration.configuration.appliedMigrations.includes(migration.name);
  });
  for (const migration of migrationsToApply) {
    Logger.update(`Applying migration ${migration.name}`);
    await migration.up(configuration);
  }
};

// src/incremental-id-plugin.ts
var IncrementalIdPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadConfiguration();
    await runMigrations(this.configuration);
    this.addSettingTab(new IncrementalIdPluginSettingTab(this, this.configuration));
    app.insertIncrementalId = async (prefix) => {
      const idDef = await this.configuration.getIncrementId(prefix);
      if (idDef) {
        return generateIncrementalId(idDef);
      }
    };
    app.insertCurrentIncrementalId = async (prefix) => {
      const idDef = await this.configuration.getCurrentId(prefix);
      if (idDef) {
        return generateIncrementalId(idDef);
      }
    };
  }
  onunload() {
    app.insertIncrementalId = void 0;
  }
  async loadConfiguration() {
    this.configuration = await IncrementalIdConfiguration.create(this);
    this.commandHandler = new CommandHandler(this);
    this.commandHandler.register();
  }
};

// src/main.ts
var main_default = IncrementalIdPlugin;
